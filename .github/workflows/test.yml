name: Zara Assistant Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Create test directories
      run: |
        mkdir -p data/logs
        mkdir -p models
        mkdir -p config

    - name: Download test models
      run: |
        # Download COCO labels
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/pjreddie/darknet/master/data/coco.names" -OutFile "models/coco.names"
        # Note: MobileNetSSD files would be downloaded here in a real setup
        echo "Placeholder for MobileNetSSD files"
        copy NUL MobileNetSSD_deploy.prototxt

    - name: Run tests
      run: |
        pytest tests/ --cov=zara --cov-report=xml -v

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Check test environment
      if: always()
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        pip list
        dir

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          coverage.xml
          .coverage
          data/logs/

  build:
    needs: test
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        architecture: 'x64'

    - name: Install PyInstaller
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Build Windows executable
      run: |
        ./build.bat

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: zara-assistant-windows
        path: dist/Zara Assistant/
        if-no-files-found: error

  notify:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check build status
      uses: technote-space/workflow-conclusion-action@v3

    - name: Send notification
      if: env.WORKFLOW_CONCLUSION == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'CI Build Failed',
            body: `Build failed in workflow ${context.workflow}. Please check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
          })